services:
    postgres:
        # pull the postgres image from Docker Hub
        image: postgres
        # map port 5433 on the host to port 5432 on the container
        ports:
            - "5433:5432"
        deploy:
            mode: replicated
            replicas: 1
        # set the password for the postgres user
        environment:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: password
            POSTGRES_DB: users
        # set the volume for the database for persistence
        volumes:
            - ./db-data/postgres/:/var/lib/postgresql/data/
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d users"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - micro-network

    mongo:
        # pull the mongo image from Docker Hub
        image: mongo
        # map port 27018 on the host to port 27017 on the container
        ports:
            - "27018:27017"
        environment:
            MONGO_INITDB_ROOT_USERNAME: admin
            MONGO_INITDB_ROOT_PASSWORD: password
            MONGO_INITDB_DATABASE: logs
        deploy:
            mode: replicated
            replicas: 1
        # set the volume for the database for persistence
        volumes:
            - ./db-data/mongo/:/data/db/
        healthcheck:
            test: [
                "CMD",
                "mongosh",
                "--eval",
                "db.adminCommand('ping')",
                "-u", "admin",
                "-p", "password",
                "--authenticationDatabase", "admin"
            ]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - micro-network

    # Mail hog to test mailer
    mailhog:
        image: "mailhog/mailhog:latest"
        ports:
            - "1025:1025"
            - "8025:8025"
        volumes:
            - ./mail-data/mailhog:/home/mailhog/maildir
        environment:
            - MH_STORAGE=maildir
            - MH_MAILDIR_PATH=maildir
        healthcheck:
            test: ["CMD", "nc", "-z", "localhost", "8025"]
            interval: 30s
            retries: 3
            timeout: 10s
            start_period: 10s
        networks:
            - micro-network

    rabbitmq:
        image: "rabbitmq:4.0.5-alpine"
        ports:
            - "5672:5672"
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - ./db-data/rabbitmq/:/var/lib/rabbitmq/
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 5s
            timeout: 10s
            retries: 5
            start_period: 10s
        networks:
            - micro-network

    broker:
        # point to the directory of the Dockerfile
        build:
            context: ./../broker
            dockerfile: ./../broker/broker.dockerfile
        restart: always
        ports:
            # map port 8000 on the host to port 80 on the container
            - "8000:80"
        deploy:
            # only ever allowed 1 replica
            mode: replicated
            replicas: 1
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
          - micro-network

    authentication:
        # point to the directory of the Dockerfile
        build:
            context: ./../authentication
            dockerfile: ./../authentication/authentication.dockerfile
        restart: always
        ports:
            - "8001:80"
        deploy:
            mode: replicated
            replicas: 1
        environment:
            POSTGRES_HOST: postgres
            POSTGRES_PORT: 5432
            POSTGRES_USER: postgres
            DB_DSN: "postgres://postgres:password@postgres:5432/users?sslmode=disable"
        # authentication service depends on the postgres service
        depends_on:
            postgres:
                condition: service_healthy
        networks:
          - micro-network

    logger:
        build:
            context: ./../logger
            dockerfile: ./../logger/logger.dockerfile
        restart: always
        # we usually don't want to map ports to the host, but
        ports:
            - "8002:80"
        deploy:
            mode: replicated
            replicas: 1
        environment:
            MONGO_URL: mongodb://mongo:27017
            MONGO_USERNAME: admin
            MONGO_PASSWORD: password
            MONGO_DATABASE: logger
        depends_on:
            mongo:
                condition: service_healthy
        networks:
            - micro-network

    mailer:
        build:
            context: ./../mailer
            dockerfile: ./../mailer/mailer.dockerfile
        restart: always
        ports:
            - "8003:80"
        deploy:
            mode: replicated
            replicas: 1
        environment:
            MAIL_PORT: 1025
            MAIL_USERNAME: ""
            MAIL_PASSWORD: ""
            MAIL_HOST: mailhog
            MAIL_ENCRYPTION: none
            MAIL_FROM_ADDRESS: no-reply@github.ziliscite.com
            MAIL_FROM_NAME: ziliscite
            MAIL_DOMAIN: localhost
        depends_on:
            mailhog:
                condition: service_healthy
        networks:
            - micro-network

    listener:
        build:
            context: ./../listener
            dockerfile: ./../listener/listener.dockerfile
        restart: always
        deploy:
            # only ever allowed 1 replica
            mode: replicated
            replicas: 1
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - micro-network

# define the network as a subnet
networks:
    micro-network:
        driver: bridge